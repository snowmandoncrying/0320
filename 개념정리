-final클래스 final 메소드
final 클래스란 부모가 자식클래스를 만들지 못하도록한 클래스이다. 즉 자식이 상속할 수 없도록 한다.
final 메소드란 자식이 재정의할 수 없도록 하는 메소드이다. 자식이 부모의 메소드를 재정의할 수 없게 한다. 부모 메소드에 final 선언 (오버라이딩 불가, 이건 그대로 써!)

-protected 접근 제한자
상속과 관련된 접근 제한자로
같은 패키지에 있을 땐 default와 동일한 효과를 내지만 (다른 패키지에 소속된 클래스의 접근 제한)
다른 패키지에 있으면 자식 클래스만 접근을 허용한다. (나를 상속하면 다른 패키지에 있어도 너는 자식이니까 받아줄게!)
이는 클래스에 걸 수 없다. 

-다형성 (Polymorphism)
같은 타입이지만 실행 결과가 다양해지는 객체의 대입을 가능하게 하는 성질이다. 
부모 타입에는 모든 자식 객체가 대입 가능하다. 

예시) 부모 클래스가 A이고 자식 클래스가 각각 B, C일 때
A a = new A(); 이것은 기본.
A a = new B(); 이는 자식 타입을 부모 타입에 대입한 것이다.
A a = new C(); 이 역시 자식 타입을 부모 타입에 대입한 것이다. 
원래라면 기본만 가능했지만 자식타입을 부모 타입에 대입하게 되자 결과가 다양하게 나온다. 이를 다형성이라고 한다.

-자동 타입 변환 (Promotion)
프로그램 실행 도중에 자동 타입 변환이 일어나는 것이다. (부모 클래스 변수에 자식 클래스 타입을 대입할 때.)
Animal이 부모이고 Cat이 자식일 때
Animal animal = cat;
Animal animal = new Cat(); 둘다 같은 의미임.
cat 과 animal은 cat의 주소를 참조한다.

자동 타입 변환할 때 바로 위의 부모가 아니더라도 상속 계층의 상위면 가능하다. (상속관계에서만 가능함! 아래에 있다해도 상속 관계가 아니면 불가능함.)
변환 후에는 부모 클래스 멤버만 접근 가능하다.

-필드의 다형성
부모 타입으로 자동 변환, 재정의된 메소드 (오버라이딩)
하나의 필드에 여러가지 값이 들어올 수 있다.
어떤 값을 집어넣느냐에 따라 필드의 타입이 달라진다.
하나의 배열로 객체를 관리해야한다. (타이어 타입이면 타이어로, 인트면 인트로)

-매개변수의 다형성
매개변수가 클래스 타입일 경우
해당 클래스의 객체 대입이 원칙이나 자식 객체를 대입하는 것도 허용한다.
